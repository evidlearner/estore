/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ibm.rho.estore.api;

import com.ibm.rho.estore.model.InvItem;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;

import java.util.Collection;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-07-24T08:05:32.010Z")

@Api(value = "inventory", description = "the inventory API")
public interface InventoryApi {

	/*
	 * @ApiOperation(value = "Find product inventory information", nickname =
	 * "getProductInventory", notes =
	 * "Find product inventory information from data store", response = InvItem.class,
	 * tags={ "product", })
	 * 
	 * @ApiResponses(value = {
	 * 
	 * @ApiResponse(code = 200, message = "successful operation", response =
	 * InvItem.class),
	 * 
	 * @ApiResponse(code = 400, message = "Invalid item ID"),
	 * 
	 * @ApiResponse(code = 404, message = "Item Id not found") })
	 * 
	 * @RequestMapping(value = "/inventory/product/{itemId}", produces = {
	 * "application/xml", "application/json" }, method = RequestMethod.GET)
	 * ResponseEntity<InvItem> getProductInventory(@ApiParam(value =
	 * "ID of product for which inventory details to be sent",required=
	 * true) @PathVariable("itemId") String itemId);
	 */
    
    @RequestMapping(value = "/inventory/addProduct",
            method = RequestMethod.POST)
    ResponseEntity<String> createProductInventory(@RequestBody InvItem item);
    
    @RequestMapping(value = "/inventory/updateProductInventory",
            method = RequestMethod.POST)
    ResponseEntity<String> updateProductInventory(@RequestBody InvItem item);
    
    @RequestMapping(value = "/inventory/findAllProduct",
            method = RequestMethod.GET)
    ResponseEntity<Collection<InvItem>> findAllInvProduct();
    

    @RequestMapping(value = "/inventory/findProductById/{item_id}",
            method = RequestMethod.GET)
    ResponseEntity<Collection<InvItem>> findProductById(@PathVariable("item_id") String item_id);
    
    @RequestMapping(value = "/inventory/ready",
            method = RequestMethod.GET)
    ResponseEntity<String> readyStatus() throws Exception;

}
